{"version":3,"file":"src_main_webapp_app_user_done-tasks_done-tasks_module_ts.js","mappings":"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","sources":["./src/main/webapp/app/user/done-tasks/done-tasks.component.ts","./src/main/webapp/app/user/done-tasks/done-tasks.component.html","./src/main/webapp/app/user/done-tasks/done-tasks.module.ts","./src/main/webapp/app/user/done-tasks/done-tasks.route.ts","./src/main/webapp/app/user/done-tasks/update/done-tasks-update.component.ts","./src/main/webapp/app/user/user-task.model.ts","./src/main/webapp/app/user/user-task.service.ts"],"sourcesContent":["import {Component, OnInit} from \"@angular/core\";\nimport {Account} from \"../../core/auth/account.model\";\nimport {AdminTask} from \"../../admin/admin-task/admin-task.model\";\nimport {ASC, DESC, ITEMS_PER_PAGE, SORT} from \"../../config/pagination.constants\";\nimport {UserTask} from \"../user-task.model\";\nimport {AdminTaskService} from \"../../admin/admin-task/service/admin-task.service\";\nimport {AccountService} from \"../../core/auth/account.service\";\nimport {ActivatedRoute, Router} from \"@angular/router\";\nimport {NgbModal} from \"@ng-bootstrap/ng-bootstrap\";\nimport {UserTaskService} from \"../user-task.service\";\nimport {combineLatest} from \"rxjs\";\nimport {HttpHeaders, HttpResponse} from \"@angular/common/http\";\nimport {UserTaskMeta} from \"../admin-task-meta.model\";\n\n@Component({\n  selector: 'jhi-done-tasks',\n  templateUrl: './done-tasks.component.html',\n})\nexport class DoneTasksComponent  implements OnInit{\n  currentAccount: Account | null = null;\n  adminTasks: AdminTask[] | null = null;\n  userTasks: UserTask[] | null = null;\n  userTasksMeta: UserTaskMeta[] | null = null;\n  isLoading = false;\n  totalItems = 0;\n  itemsPerPage = ITEMS_PER_PAGE;\n  page!: number;\n  predicate!: string;\n  ascending!: boolean;\n\n  constructor(\n    private adminTaskService: AdminTaskService,\n    private userTaskService: UserTaskService,\n    private accountService: AccountService,\n    private activatedRoute: ActivatedRoute,\n    private router: Router,\n    private modalService: NgbModal\n  ) {}\n\n  ngOnInit(): void {\n    this.accountService.identity().subscribe(account => (this.currentAccount = account));\n    this.handleNavigation();\n  }\n\n  loadAll(): void {\n    this.isLoading = true;\n    this.userTaskService\n      .query( {\n        page: this.page -1,\n        size: this.itemsPerPage,\n        sort: this.sort(),\n      })\n      .subscribe({\n        next: (res: HttpResponse<UserTaskMeta[]>) => {\n          this.isLoading = false;\n          this.onSuccess(res.body, res.headers)\n        },\n        error: () => (this.isLoading = false),\n      });\n  }\n\n\n\n  transition(): void {\n    this.router.navigate(['./'], {\n      relativeTo: this.activatedRoute.parent,\n      queryParams: {\n        page: this.page,\n        sort: `${this.predicate},${this.ascending ? ASC : DESC}`,\n      },\n    });\n  }\n\n\n  private handleNavigation(): void {\n    combineLatest([this.activatedRoute.data, this.activatedRoute.queryParamMap]).subscribe( ([data,params]) => {\n      const page = params.get('page');\n      this.page = +(page ?? 1);\n      const sort = (params.get(SORT) ?? data['defaultSort']).split(',');\n      this.predicate = sort[0];\n      this.ascending = sort[1] === ASC;\n      this.loadAll();\n    });\n\n  }\n\n  private sort(): string[] {\n    const result = [`${this.predicate},${this.ascending ? ASC : DESC}`];\n    if (this.predicate !== 'id') {\n      result.push('id');\n    }\n    return result;\n  }\n\n  private onSuccess(userTasksMeta: UserTaskMeta[] | null, headers: HttpHeaders): void {\n    this.totalItems = Number(headers.get('X-Total-Count'));\n    this.userTasksMeta = userTasksMeta;\n  }\n\n\n}\n","<div>\n  <h2>\n    <span id=\"done-task-page-heading\" data-cy=\"doneTaskPageHeading\">Gelöste Beispiele</span>\n\n    <div class=\"d-flex justify-content-end\">\n      <button class=\"btn btn-info mr-2\" (click)=\"loadAll()\" [disabled]=\"isLoading\">\n        <fa-icon icon=\"sync\" [spin]=\"isLoading\"></fa-icon>\n        <span>Refresh List</span>\n      </button>\n    </div>\n  </h2>\n\n  <jhi-alert-error></jhi-alert-error>\n\n  <jhi-alert></jhi-alert>\n\n  <div class=\"table-responsive\" *ngIf=\"userTasksMeta\">\n    <table class=\"table table-striped\" aria-describedby=\"admin-task-page-heading\">\n      <thead>\n      <tr jhiSort [(predicate)]=\"predicate\" [(ascending)]=\"ascending\" (sortChange)=\"transition()\">\n        <th scope=\"col\" jhiSortBy=\"id\"><span>ID</span> <fa-icon icon=\"sort\"></fa-icon></th>\n        <th><span>Beispiel Name</span></th>\n        <th><span>Angabe Excel</span></th>\n        <th><span>Angabe PDF</span></th>\n        <th><span>Abgabe Excel</span></th>\n        <th><span>Beispiel richtig?</span></th>\n        <th scope=\"col\"></th>\n      </tr>\n      </thead>\n      <tbody *ngIf=\"userTasksMeta\">\n      <tr *ngFor=\"let userTaskMeta of userTasksMeta;\">\n        <ng-container *ngIf=\"userTaskMeta?.user_id == currentAccount?.id\">\n          <td>{{ userTaskMeta.id }}</td>\n          <td>{{ userTaskMeta.admin_task_name }}</td>\n          <td  *ngIf=\"userTaskMeta.instruction_excel != undefined\">\n            <jhi-file-download [fileId]=\"userTaskMeta.instruction_excel\"> </jhi-file-download>\n          </td>\n\n          <td *ngIf=\"userTaskMeta.instruction_pdf != undefined\">\n            <jhi-file-download [fileId]=\"userTaskMeta.instruction_pdf\"> </jhi-file-download>\n          </td>\n\n          <td *ngIf=\"userTaskMeta.submission_excel != undefined\">\n            <jhi-file-download [fileId]=\"userTaskMeta.submission_excel\"> </jhi-file-download>\n          </td>\n          <td>{{ userTaskMeta.is_correct}}</td>\n        </ng-container>\n\n<!--        <td class=\"text-right\">-->\n<!--          <div class=\"btn-group\">-->\n<!--            <button-->\n<!--              type=\"button\"-->\n<!--              (click)=\"deleteAdminTask(adminTask)\"-->\n<!--              class=\"btn btn-danger btn-sm\"-->\n<!--            >-->\n<!--              <fa-icon icon=\"times\"></fa-icon>-->\n<!--              <span class=\"d-none d-md-inline\">Bearbeiten</span>-->\n<!--            </button>-->\n<!--          </div>-->\n<!--        </td>-->\n      </tr>\n      </tbody>\n    </table>\n  </div>\n\n  <div *ngIf=\"adminTasks\">\n    <div class=\"row justify-content-center\">\n      <jhi-item-count [params]=\"{ page: page, totalItems: totalItems, itemsPerPage: itemsPerPage }\"></jhi-item-count>\n    </div>\n\n    <div class=\"row justify-content-center\">\n      <ngb-pagination\n        [collectionSize]=\"totalItems\"\n        [(page)]=\"page\"\n        [pageSize]=\"itemsPerPage\"\n        [maxSize]=\"5\"\n        [rotate]=\"true\"\n        [boundaryLinks]=\"true\"\n        (pageChange)=\"transition()\"\n      ></ngb-pagination>\n    </div>\n  </div>\n</div>\n","import {NgModule} from \"@angular/core\";\nimport {SharedModule} from \"../../shared/shared.module\";\nimport {RouterModule} from \"@angular/router\";\nimport {allTasksRoute} from \"../all-tasks/all-tasks.route\";\nimport {NgbModule} from \"@ng-bootstrap/ng-bootstrap\";\nimport {AdminTaskModule} from \"../../admin/admin-task/admin-task.module\";\nimport {AllTasksComponent} from \"../all-tasks/all-tasks.component\";\nimport {doneTasksRoute} from \"./done-tasks.route\";\nimport {DoneTasksComponent} from \"./done-tasks.component\";\nimport {DoneTasksUpdateComponent} from \"./update/done-tasks-update.component\";\n\n@NgModule({\n  imports: [SharedModule, RouterModule.forChild(doneTasksRoute), NgbModule],\n  declarations: [\n    DoneTasksComponent,\n    DoneTasksUpdateComponent,\n  ],\n\n})\nexport class DoneTasksModule {}\n","import {ActivatedRouteSnapshot, Resolve, Routes} from \"@angular/router\";\nimport {AllTasksComponent} from \"../all-tasks/all-tasks.component\";\nimport {DoneTasksComponent} from \"./done-tasks.component\";\nimport {AdminTaskUpdateComponent} from \"../../admin/admin-task/update/admin-task-update.component\";\nimport {AdminTaskResolve} from \"../../admin/admin-task/admin-task.route\";\nimport {DoneTasksUpdateComponent} from \"./update/done-tasks-update.component\";\nimport {Injectable} from \"@angular/core\";\nimport {IUserTask, UserTask} from \"../user-task.model\";\nimport {UserTaskService} from \"../user-task.service\";\nimport {Observable, of} from \"rxjs\";\n\n@Injectable({providedIn: 'root'})\nexport class DoneUserTaskResolve implements Resolve<IUserTask> {\n  constructor(private service: UserTaskService) {\n  }\n\n  resolve(route: ActivatedRouteSnapshot): Observable<IUserTask> {\n    const id = route.params['id'];\n    if (id) {\n      return this.service.find(id);\n    }\n    return of(new UserTask());\n  }\n}\n\nexport const doneTasksRoute: Routes = [\n    {\n      path:'',\n      component: DoneTasksComponent,data: {\n        defaultSort: 'id,asc',\n      },\n    },\n  {\n    path: 'edit',\n    component: DoneTasksUpdateComponent,\n    resolve: {\n      adminTask: DoneUserTaskResolve,\n    },\n  },\n  ];\n","import {Component, OnInit} from \"@angular/core\";\nimport {UserTask} from \"../../user-task.model\";\nimport {UserTaskService} from \"../../user-task.service\";\nimport {ActivatedRoute} from \"@angular/router\";\nimport {FormBuilder} from \"@angular/forms\";\nimport {User} from \"../../../admin/user-management/user-management.model\";\nimport {numeric} from \"@rxweb/reactive-form-validators\";\n\n@Component({\n  selector: 'jhi-done-tasks-update',\n  templateUrl: './done-tasks-update.component.html'\n})\nexport class DoneTasksUpdateComponent {\n  userTask!: UserTask;\n  isSaving = false;\n  authorities: string[] = [];\n  submissionExcel?: number;\n\n  editForm = this.fb.group( {\n    id: [],\n  });\n\n  constructor(private userTaskService: UserTaskService, private route: ActivatedRoute, private fb: FormBuilder) {\n  }\n\n  previousState(): void {\n    window.history.back();\n  }\n\n  save(): void {\n    this.isSaving = true;\n    this.updateUserTask(this.userTask);\n    if (this.userTask.id !== undefined) {\n      this.userTaskService.update(this.userTask).subscribe({\n        next: () => this.onSaveSuccess(),\n        error: () => this.onSaveError(),\n      });\n    } else {\n      this.userTaskService.create(this.userTask).subscribe({\n        next: () => this.onSaveSuccess(),\n        error: () => this.onSaveError(),\n      });\n    }\n  }\n\n  private updateUserTask(userTask: UserTask): void {\n    userTask.submission_excel = this.submissionExcel;\n  }\n\n  private onSaveSuccess(): void {\n    this.isSaving = false;\n    this.previousState();\n  }\n\n  private onSaveError(): void {\n    this.isSaving = false;\n  }\n\n\n\n\n}\n","export interface IUserTask {\n  id?: number;\n  isCorrect?: boolean;\n  adminTask?: number;\n  instruction_user_excel?: number;\n  submission_excel?: number;\n  user?: number;\n}\n\nexport class UserTask implements IUserTask {\n  constructor(\n    public id?: number,\n    public isCorrect?: boolean,\n    public adminTask?: number,\n    public instruction_user_excel?: number,\n    public submission_excel?: number,\n    public user?: number\n  ) {\n}\n}\n","import {Injectable} from \"@angular/core\";\nimport {HttpClient, HttpResponse} from \"@angular/common/http\";\nimport {ApplicationConfigService} from \"../core/config/application-config.service\";\nimport {Observable} from \"rxjs\";\nimport {Pagination} from \"../core/request/request.model\";\nimport {createRequestOption} from \"../core/request/request-util\";\nimport {IUserTask} from \"./user-task.model\";\nimport {IUserTaskMeta} from \"./admin-task-meta.model\";\nimport {IUser} from \"../admin/user-management/user-management.model\";\n\n@Injectable({ providedIn: 'root'})\nexport class UserTaskService {\n  // extra resourceUrl for the DTO Object\n  private resourceUrlDTO = this.applicationConfigService.getEndpointFor('api/user_task_meta');\n  private resourceUrl = this.applicationConfigService.getEndpointFor('api/user_task');\n\n  constructor(private http: HttpClient, private applicationConfigService: ApplicationConfigService) {}\n\n  create(userTask: IUserTask): Observable<IUserTask> {\n    return this.http.post<IUserTask>(this.resourceUrl, userTask);\n  }\n\n  find(id: number): Observable<IUserTask> {\n    return this.http.get<IUserTask>(`${this.resourceUrl}/${id}`);\n  }\n\n  query(req?: Pagination): Observable<HttpResponse<IUserTaskMeta[]>> {\n    const options = createRequestOption(req);\n    return this.http.get<IUserTaskMeta[]>(this.resourceUrlDTO, { params: options, observe: 'response'});\n  }\n\n  update(userTask: IUserTask): Observable<IUserTask> {\n    return this.http.put<IUserTask>(this.resourceUrl, userTask);\n  }\n\n  delete(id: number): Observable<{}> {\n    return this.http.delete(`${this.resourceUrl}/${id}`);\n  }\n\n\n\n}\n"],"names":[],"sourceRoot":"webpack:///"}